4 main features of es6 used in electron
--> const keyword
--> let keyword
--> arrow fucntion
--> template literals

There is only 1 main process and main process can create many new Rendere process.
Main process creates the webpages while the renderer process handles the processes inside the praticular window

		Nodejs(main)
		  /   \
	   /	   \
	  /		    \
  Renderer   Renderer(chromium)


main.js is the main process inside electron which is defined in package.json which can be changed


app.on('ready', createWindow)  from where first renderer process starts.


// Create the browser window.
  mainWindow = new BrowserWindow({width: 800, height: 600})

  // and load the index.html of the app.
  mainWindow.loadURL(url.format({
    pathname: path.join(__dirname, 'index.html'),
    protocol: 'file:',
    slashes: true
  }))


electron-reload to electronjs is like nodemon to nodejs


for native library install through npm, make a file named electron-npm with contents:

# Electron's version.
export npm_config_target=1.7.12
# The architecture of Electron, can be ia32 or x64.
export npm_config_arch=x64
export npm_config_target_arch=x64
# Download headers for Electron.
export npm_config_disturl=https://atom.io/download/electron
# Tell node-pre-gyp that we are building for Electron.
export npm_config_runtime=electron
# Tell node-pre-gyp to build module from source code.
export npm_config_build_from_source=true
# Install all dependencies, and store cache to ~/.electron-gyp.
npm install $1


in above you need to change electron's version and unless we run a 32 bit machine then we need to change according likt npm_config_arch variable
chmod +x electron-npm, as it is an shell script
after this while installing a package do it by ./electron-npm packagename

devtron is a debugging tool of chromium with few more features by electron

Electron api-
main 3 will be used: Main Process, Render Process and Shared

API: Main Process

electron.app- controls events from app launch to app quitting https://electronjs.org/docs/api/app


electron.app

BrowserWindows behave significantly different on different platforms. eg. modal parameter is different on different platforms

parent-child relationship in windows

frameless window is essentially a browser  window without any OS interface components like toolbars. Eg. apple's quicktime player

--->BrowserWindow events are important to be seen.
				responsive and unresponsive are also important events.
				setAlwaysOnTop is also a good once
				reload, getParentWindow

electron-window-state is a npm package for store and restore window sizes and positions for app

webContents is another important property of BrowserWindow object
Think of BrowserWindow as where the contents will be loaded and webContents as the actual content itself.
we access webContents in BrowserWindow from object of webContents
1. events: did-fail-load, did-get-response-details
2. use event login for content on basic password auth in app (e.g. in about.html)
3. executeJavascript for remote javascript


sessions help manage state of the app, like managing cookies, downloads, and proxy setting
create session in persistent and in memory
Custom session

session: cookies
session: DownloadItem
accelerator : define keyboard shortcuts, string representation of keyboard

mainMenu=new Menu() appends new MenuItem();  setApplication in app.on('ready',()=>{createWindow();Menu.setApplicationMenu(mainMenu);})

interacting with tray of mac or linux os

powerMonitor is important in case of meeting

InterProcessCommunication helps us send messages between main and renderer processes.
ipc by default sends data asynchronously .
we can send synchronous data from renderer

remote:
In Electron, GUI-related modules (such as dialog, menu etc.) are only available in the main process, not in the renderer process.
In order to use them from the renderer process, the ipc module is necessary to send inter-process messages to the main process.
With the remote module, you can invoke methods of the main process object without explicitly sending inter-process messages, similar to Java's RMI.
remote module simply passes the intention to main module and the dialog instance exits entirely on the main process, which will be garbage collected once
we are done with it. Make sure to unregister the remote once you are done with it as to prevent memory leaks.
In the dialog if you dont want to stop the background even you must use a callback.

BrowserWindowProxy object is an instance of BrowserWindow that gets returned from the native window.open method and provides some control over BrowserWindows

process shared api for electron version , resourcesPath
process.hang can be used to block logoff before 8 hrs

screen is used by both renderer and mainprocess
shell handles the remote resources, more often used for local file resources.

clipboard for clipboard of systems

Detect whether there is internet connection or not;
window.addEventListener('online',()=>{
	console.log('User online');
})
window.addEventListener('offline',()=>{
	console.log('User offline');
}) // You can send the data to mainprocess by ipc

---> app to create must not close and must always work in background. e.g. Skype
